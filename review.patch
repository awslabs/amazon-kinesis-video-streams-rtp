From 80d3e0c2a74a2ce219614a0204b8c471bfc33c24 Mon Sep 17 00:00:00 2001
From: Gaurav Aggarwal <aggarg@amazon.com>
Date: Wed, 31 Jul 2024 13:25:13 +0530
Subject: [PATCH] Code review suggestions

Signed-off-by: Gaurav Aggarwal <aggarg@amazon.com>
---
 source/include/rtp_pkt_queue.h                |   4 +-
 source/rtp_pkt_queue.c                        |  34 +-
 test/unit-test/CMakeLists.txt                 |   4 +-
 .../unit-test/rtpPktStore/rtpPktStore_utest.c | 355 --------------
 .../rtp_packet_queue/rtp_packet_queue_utest.c | 434 ++++++++++++++++++
 .../ut.cmake                                  |   2 +-
 6 files changed, 457 insertions(+), 376 deletions(-)
 delete mode 100644 test/unit-test/rtpPktStore/rtpPktStore_utest.c
 create mode 100644 test/unit-test/rtp_packet_queue/rtp_packet_queue_utest.c
 rename test/unit-test/{rtpPktStore => rtp_packet_queue}/ut.cmake (98%)

diff --git a/source/include/rtp_pkt_queue.h b/source/include/rtp_pkt_queue.h
index 6aa8904..799040e 100644
--- a/source/include/rtp_pkt_queue.h
+++ b/source/include/rtp_pkt_queue.h
@@ -40,10 +40,10 @@ RtpPacketQueueResult_t RtpPacketQueue_Init( RtpPacketQueue_t * pQueue,
                                             size_t rtpPacketInfoArrayLength );

 RtpPacketQueueResult_t RtpPacketQueue_Enqueue( RtpPacketQueue_t * pQueue,
-                                               RtpPacketInfo_t * pRtpPacketInfo );
+                                               const RtpPacketInfo_t * pRtpPacketInfo );

 RtpPacketQueueResult_t RtpPacketQueue_ForceEnqueue( RtpPacketQueue_t * pQueue,
-                                                    RtpPacketInfo_t * pRtpPacketInfo,
+                                                    const RtpPacketInfo_t * pRtpPacketInfo,
                                                     RtpPacketInfo_t * pDeletedRtpPacketInfo );

 RtpPacketQueueResult_t RtpPacketQueue_Dequeue( RtpPacketQueue_t * pQueue,
diff --git a/source/rtp_pkt_queue.c b/source/rtp_pkt_queue.c
index 505ba13..39d65f6 100644
--- a/source/rtp_pkt_queue.c
+++ b/source/rtp_pkt_queue.c
@@ -9,19 +9,19 @@
 #define WRAP( x, n ) \
     ( ( x ) % ( n ) )

-#define INC_READ_INDEX( pQueue ) \
-    WRAP( ( pQueue )->readIndex + 1,\
+#define INC_READ_INDEX( pQueue )        \
+    WRAP( ( pQueue )->readIndex + 1,    \
           ( pQueue )->rtpPacketInfoArrayLength )

-#define INC_WRITE_INDEX( pQueue ) \
-    WRAP( ( pQueue )->writeIndex + 1,\
+#define INC_WRITE_INDEX( pQueue )       \
+    WRAP( ( pQueue )->writeIndex + 1,   \
           ( pQueue )->rtpPacketInfoArrayLength )

 #define IS_QUEUE_FULL( pQueue ) \
-    ( pQueue->packetCount == ( pQueue )->rtpPacketInfoArrayLength )
+    ( ( pQueue )->packetCount == ( pQueue )->rtpPacketInfoArrayLength )

 #define IS_QUEUE_EMPTY( pQueue ) \
-    ( pQueue->packetCount == 0 )
+    ( ( pQueue )->packetCount == 0 )

 /*----------------------------------------------------------------------------*/

@@ -58,10 +58,10 @@ RtpPacketQueueResult_t RtpPacketQueue_Init( RtpPacketQueue_t * pQueue,
 /*----------------------------------------------------------------------------*/

 /**
- * @brief Add an RTP packet into the specified RTP packet queue..
+ * @brief Add an RTP packet info into the specified queue.
  */
 RtpPacketQueueResult_t RtpPacketQueue_Enqueue( RtpPacketQueue_t * pQueue,
-                                               RtpPacketInfo_t * pRtpPacketInfo )
+                                               const RtpPacketInfo_t * pRtpPacketInfo )
 {
     RtpPacketQueueResult_t result = RTP_PACKET_QUEUE_RESULT_OK;

@@ -95,11 +95,12 @@ RtpPacketQueueResult_t RtpPacketQueue_Enqueue( RtpPacketQueue_t * pQueue,
 /*----------------------------------------------------------------------------*/

 /**
- * @brief Add an element to the queue, replacing the oldest element if the queue is full.
- *        Return the deleted packet info if the queue is full.
+ * @brief Add an RTP packet info into the specified queue.
+ *
+ * Delete the oldest RTP packet info and return it, if the queue is full.
  */
 RtpPacketQueueResult_t RtpPacketQueue_ForceEnqueue( RtpPacketQueue_t * pQueue,
-                                                    RtpPacketInfo_t * pRtpPacketInfo,
+                                                    const RtpPacketInfo_t * pRtpPacketInfo,
                                                     RtpPacketInfo_t * pDeletedRtpPacketInfo )
 {
     RtpPacketQueueResult_t result = RTP_PACKET_QUEUE_RESULT_OK;
@@ -138,7 +139,7 @@ RtpPacketQueueResult_t RtpPacketQueue_ForceEnqueue( RtpPacketQueue_t * pQueue,
 /*----------------------------------------------------------------------------*/

 /**
- * @brief Read and remove the oldest elements from the queue.
+ * @brief Read and remove the oldest RTP packet info from the queue.
  */
 RtpPacketQueueResult_t RtpPacketQueue_Dequeue( RtpPacketQueue_t * pQueue,
                                                RtpPacketInfo_t * pRtpPacketInfo )
@@ -177,7 +178,7 @@ RtpPacketQueueResult_t RtpPacketQueue_Dequeue( RtpPacketQueue_t * pQueue,
 /*----------------------------------------------------------------------------*/

 /**
- * @brief Read the first element from the queue without removing it.
+ * @brief Read the oldest RTP packet info from the queue without removing it.
  */
 RtpPacketQueueResult_t RtpPacketQueue_Peek( RtpPacketQueue_t * pQueue,
                                             RtpPacketInfo_t * pRtpPacketInfo )
@@ -211,9 +212,10 @@ RtpPacketQueueResult_t RtpPacketQueue_Peek( RtpPacketQueue_t * pQueue,
 /*----------------------------------------------------------------------------*/

 /**
- * @brief Read and remove the element with the matching sequence number from the queue.
- *        Return RTP_PACKET_QUEUE_RESULT_PACKET_NOT_FOUND is the sequence number is
- *        not found.
+ * @brief Read and remove the RTP packet info with the matching sequence number.
+ *
+ * Return RTP_PACKET_QUEUE_RESULT_PACKET_NOT_FOUND if an RTP packet info with
+ * matching sequence number is not found.
  */
 RtpPacketQueueResult_t RtpPacketQueue_Retrieve( RtpPacketQueue_t * pQueue,
                                                 uint16_t seqNum,
diff --git a/test/unit-test/CMakeLists.txt b/test/unit-test/CMakeLists.txt
index 6d831c5..846a5c2 100644
--- a/test/unit-test/CMakeLists.txt
+++ b/test/unit-test/CMakeLists.txt
@@ -86,7 +86,7 @@ include( ${MODULE_ROOT_DIR}/test/unit-test/cmock/create_test.cmake )
 # Include unit-test build configuration.
 include( ${UNIT_TEST_DIR}/packetization/ut.cmake )
 include( ${UNIT_TEST_DIR}/depacketization/ut.cmake )
-include( ${UNIT_TEST_DIR}/rtpPktStore/ut.cmake )
+include( ${UNIT_TEST_DIR}/rtp_packet_queue/ut.cmake )

 #  ==================================== Coverage Analysis configuration ========================================
 # Add a target for running coverage on tests.
@@ -96,6 +96,6 @@ add_custom_target( coverage
     DEPENDS cmock unity
     packetization
     depacketization
-    rtpPktStore
+    rtp_packet_queue
     WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
 )
\ No newline at end of file
diff --git a/test/unit-test/rtpPktStore/rtpPktStore_utest.c b/test/unit-test/rtpPktStore/rtpPktStore_utest.c
deleted file mode 100644
index df13769..0000000
--- a/test/unit-test/rtpPktStore/rtpPktStore_utest.c
+++ /dev/null
@@ -1,355 +0,0 @@
-/* Unity includes. */
-#include "unity.h"
-#include "catch_assert.h"
-
-/* Standard includes. */
-#include <string.h>
-#include <stdint.h>
-
-/* API includes. */
-#include "rtp_pkt_queue.h"
-
-/* ===========================  EXTERN VARIABLES  =========================== */
-
-#define MAX_IN_FLIGHT_PKTS 128
-
-RtpPacketInfo_t rtpPacketInfoArr[ MAX_IN_FLIGHT_PKTS ];
-RtpPacketQueue_t rtpPacketQueue;
-
-void setUp( void )
-{
-    memset( &( rtpPacketInfoArr[ 0 ] ),
-            0,
-            sizeof( sizeof( RtpPacketInfo_t ) * MAX_IN_FLIGHT_PKTS ) );
-}
-
-void tearDown( void )
-{
-}
-
-/* ==============================  Test Cases  ============================== */
-
-/**
- * @brief Validate RtpPktQueueInit functionality.
- */
-void test_RtpPacketQueue_Init( void )
-{
-    RtpPacketQueueResult_t result;
-
-    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
-                                  &( rtpPacketInfoArr[ 0 ] ),
-                                  MAX_IN_FLIGHT_PKTS );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-}
-
-/*-----------------------------------------------------------*/
-
-/**
- * @brief Add packets in the RTP packet Queue.
- */
-void test_RtpPacketQueue_ForceEnqueue( void )
-{
-    RtpPacketQueueResult_t result;
-    RtpPacketInfo_t deletedRtpPacketInfo, rtpPacketInfo;
-    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
-                                           0x12, 0x34, 0x43, 0x21,
-                                           0xAB, 0xCD, 0xDB, 0xCA };
-
-    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
-                                  &( rtpPacketInfoArr[ 0 ] ),
-                                  MAX_IN_FLIGHT_PKTS );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-
-
-    for( int i = 0; i < 20; i++ )
-    {
-        rtpPacketInfo.seqNum = i;
-        rtpPacketInfo.pSerializedRtpPacket = expectedSerializedPacket;
-        rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
-        result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
-                                              &rtpPacketInfo,
-                                              &deletedRtpPacketInfo );
-        TEST_ASSERT_EQUAL( result,
-                           RTP_PACKET_QUEUE_RESULT_OK );
-    }
-}
-
-/*-----------------------------------------------------------*/
-
-/**
- * @brief Validate Queue full functionality.
- */
-void test_RtpPacketQueue_ForceEnqueue_Full( void )
-{
-    RtpPacketQueueResult_t result;
-    RtpPacketInfo_t deletedRtpPacketInfo, rtpPacketInfo;
-    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
-                                           0x12, 0x34, 0x43, 0x21,
-                                           0xAB, 0xCD, 0xDB, 0xCA };
-
-    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
-                                  &( rtpPacketInfoArr[ 0 ] ),
-                                  4 );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-
-    for( int i = 0; i < 4; i++ )
-    {
-        rtpPacketInfo.seqNum = i;
-        rtpPacketInfo.pSerializedRtpPacket = expectedSerializedPacket;
-        rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
-        result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
-                                              &rtpPacketInfo,
-                                              &deletedRtpPacketInfo );
-        TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-    }
-
-    result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
-                                              &rtpPacketInfo,
-                                              &deletedRtpPacketInfo );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_PACKET_DELETED );
-    TEST_ASSERT_EQUAL( deletedRtpPacketInfo.seqNum,
-                       0 ); // First packet deleted
-
-    result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
-                                              &rtpPacketInfo,
-                                              &deletedRtpPacketInfo );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_PACKET_DELETED );
-    TEST_ASSERT_EQUAL( deletedRtpPacketInfo.seqNum,
-                       1 ); // Second packet deleted
-}
-
-/*-----------------------------------------------------------*/
-
-/**
- * @brief Validate Queue deletion when queue is empty.
- */
-void test_RtpPacketQueue_Dequeue_EmptyQueue( void )
-{
-    RtpPacketQueueResult_t result;
-    RtpPacketInfo_t rtpPacketInfo;
-
-    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
-                                  &( rtpPacketInfoArr[ 0 ] ),
-                                  MAX_IN_FLIGHT_PKTS );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-
-    result = RtpPacketQueue_Dequeue( &( rtpPacketQueue ),
-                                     &rtpPacketInfo );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_EMPTY );
-}
-
-/*-----------------------------------------------------------*/
-
-/**
- * @brief Validate Queue deletion functionality.
- */
-void test_RtpPacketQueue_Dequeue( void )
-{
-    RtpPacketQueueResult_t result;
-    RtpPacketInfo_t deletedRtpPacketInfo, rtpPacketInfo, rtpDeletedPacketInfo;
-    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
-                                           0x12, 0x34, 0x43, 0x21,
-                                           0xAB, 0xCD, 0xDB, 0xCA };
-
-    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
-                                  &( rtpPacketInfoArr[ 0 ] ),
-                                  MAX_IN_FLIGHT_PKTS );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-
-    rtpPacketInfo.seqNum = 10;
-    rtpPacketInfo.pSerializedRtpPacket = expectedSerializedPacket;
-    rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
-    result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
-                                          &rtpPacketInfo,
-                                          &deletedRtpPacketInfo );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-
-    result = RtpPacketQueue_Dequeue( &( rtpPacketQueue ),
-                                     &rtpDeletedPacketInfo );
-    TEST_ASSERT_EQUAL( rtpDeletedPacketInfo.seqNum,
-                       10 );
-    TEST_ASSERT_EQUAL( rtpDeletedPacketInfo.serializedPacketLength,
-                       sizeof( expectedSerializedPacket ) );
-    TEST_ASSERT_EQUAL_UINT8_ARRAY( &( rtpDeletedPacketInfo.pSerializedRtpPacket[ 0 ] ),
-                                   &( expectedSerializedPacket[ 0 ] ),
-                                   sizeof( expectedSerializedPacket ) );
-
-}
-
-/*-----------------------------------------------------------*/
-
-/**
- * @brief Validate Queue peek functionality when queue is empty.
- */
-void test_RtpPacketQueue_Peek_EmptyQueue( void )
-{
-    RtpPacketQueueResult_t result;
-    RtpPacketInfo_t rtpPacketInfo;
-
-    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
-                                  &( rtpPacketInfoArr[ 0 ] ),
-                                  MAX_IN_FLIGHT_PKTS );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-
-    result = RtpPacketQueue_Peek( &( rtpPacketQueue ),
-                                  &rtpPacketInfo );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_EMPTY );
-}
-
-/*-----------------------------------------------------------*/
-
-/**
- * @brief Validate Queue peek functionality.
- */
-void test_RtpPacketQueue_Peek( void )
-{
-    RtpPacketQueueResult_t result;
-    RtpPacketInfo_t deletedRtpPacketInfo, rtpPacketInfo, rtpDeletedPacketInfo;
-    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
-                                           0x12, 0x34, 0x43, 0x21,
-                                           0xAB, 0xCD, 0xDB, 0xCA };
-
-    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
-                                  &( rtpPacketInfoArr[ 0 ] ),
-                                  MAX_IN_FLIGHT_PKTS );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-
-    result = RtpPacketQueue_Dequeue( &( rtpPacketQueue ),
-                                     &rtpPacketInfo );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_EMPTY );
-
-    rtpPacketInfo.seqNum = 20;
-    rtpPacketInfo.pSerializedRtpPacket = expectedSerializedPacket;
-    rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
-    result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
-                                          &rtpPacketInfo,
-                                          &deletedRtpPacketInfo );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-
-    result = RtpPacketQueue_Peek( &( rtpPacketQueue ),
-                                  &rtpDeletedPacketInfo );
-    TEST_ASSERT_EQUAL( rtpDeletedPacketInfo.seqNum,
-                       20 );
-    TEST_ASSERT_EQUAL( rtpDeletedPacketInfo.serializedPacketLength,
-                       sizeof( expectedSerializedPacket ) );
-    TEST_ASSERT_EQUAL_UINT8_ARRAY( &( rtpDeletedPacketInfo.pSerializedRtpPacket[ 0 ] ),
-                                   &( expectedSerializedPacket[ 0 ] ),
-                                   sizeof( expectedSerializedPacket ) );
-
-}
-
-/*-----------------------------------------------------------*/
-
-/**
- * @brief Validate Queue Retrieve functionality when queue is empty.
- */
-void test_RtpPacketQueue_Retrieve_Empty( void )
-{
-    RtpPacketQueueResult_t result;
-    RtpPacketInfo_t retrieveRtpPacketInfo;
-
-    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
-                                  &( rtpPacketInfoArr[ 0 ] ),
-                                  MAX_IN_FLIGHT_PKTS );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-
-    result = RtpPacketQueue_Retrieve( &( rtpPacketQueue ),
-                                      0,
-                                      &retrieveRtpPacketInfo );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_EMPTY );
-}
-
-/*-----------------------------------------------------------*/
-
-/**
- * @brief Validate Queue Retrieve functionality when element is not found.
- */
-void test_RtpPacketQueue_Retrieve_NotFound( void )
-{
-    RtpPacketQueueResult_t result;
-    RtpPacketInfo_t deletedRtpPacketInfo, rtpPacketInfo, rtpDeletedPacketInfo;
-    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
-                                           0x12, 0x34, 0x43, 0x21,
-                                           0xAB, 0xCD, 0xDB, 0xCA };
-
-    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
-                                  &( rtpPacketInfoArr[ 0 ] ),
-                                  MAX_IN_FLIGHT_PKTS );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-
-    for( int i = 0; i < 20; i++ )
-    {
-        rtpPacketInfo.seqNum = i;
-        rtpPacketInfo.pSerializedRtpPacket = expectedSerializedPacket;
-        rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
-        result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
-                                              &rtpPacketInfo,
-                                              &deletedRtpPacketInfo );
-        TEST_ASSERT_EQUAL( result,
-                           RTP_PACKET_QUEUE_RESULT_OK );
-    }
-
-    result = RtpPacketQueue_Retrieve( &( rtpPacketQueue ),
-                                      100,
-                                      &rtpDeletedPacketInfo );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_PACKET_NOT_FOUND );
-
-}
-
-/*-----------------------------------------------------------*/
-
-/**
- * @brief Validate Queue Retrieve functionality when element is found.
- */
-void test_RtpPacketQueue_Retrieve( void )
-{
-    RtpPacketQueueResult_t result;
-    RtpPacketInfo_t deletedRtpPacketInfo, rtpPacketInfo, rtpDeletedPacketInfo;
-    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
-                                           0x12, 0x34, 0x43, 0x21,
-                                           0xAB, 0xCD, 0xDB, 0xCA };
-
-    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
-                                  &( rtpPacketInfoArr[ 0 ] ),
-                                  MAX_IN_FLIGHT_PKTS );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-
-    for( int i = 0; i < 20; i++ )
-    {
-        rtpPacketInfo.seqNum = i;
-        rtpPacketInfo.pSerializedRtpPacket = expectedSerializedPacket;
-        rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
-        result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
-                                              &rtpPacketInfo,
-                                              &deletedRtpPacketInfo );
-        TEST_ASSERT_EQUAL( result,
-                           RTP_PACKET_QUEUE_RESULT_OK );
-    }
-
-    result = RtpPacketQueue_Retrieve( &( rtpPacketQueue ),
-                                      8,
-                                      &rtpDeletedPacketInfo );
-    TEST_ASSERT_EQUAL( result,
-                       RTP_PACKET_QUEUE_RESULT_OK );
-
-}
\ No newline at end of file
diff --git a/test/unit-test/rtp_packet_queue/rtp_packet_queue_utest.c b/test/unit-test/rtp_packet_queue/rtp_packet_queue_utest.c
new file mode 100644
index 0000000..fcd80a3
--- /dev/null
+++ b/test/unit-test/rtp_packet_queue/rtp_packet_queue_utest.c
@@ -0,0 +1,434 @@
+/* Unity includes. */
+#include "unity.h"
+#include "catch_assert.h"
+
+/* Standard includes. */
+#include <string.h>
+#include <stdint.h>
+
+/* API includes. */
+#include "rtp_pkt_queue.h"
+
+/* ===========================  EXTERN VARIABLES  =========================== */
+
+#define MAX_IN_FLIGHT_PKTS 128
+
+RtpPacketInfo_t rtpPacketInfoArray[ MAX_IN_FLIGHT_PKTS ];
+RtpPacketQueue_t rtpPacketQueue;
+
+void setUp( void )
+{
+    memset( &( rtpPacketInfoArray[ 0 ] ),
+            0,
+            sizeof( sizeof( RtpPacketInfo_t ) * MAX_IN_FLIGHT_PKTS ) );
+}
+
+void tearDown( void )
+{
+}
+
+/* ==============================  Test Cases  ============================== */
+
+/**
+ * @brief Validate RtpPacketQueue_Init functionality.
+ */
+void test_RtpPacketQueue_Init( void )
+{
+    RtpPacketQueueResult_t result;
+
+    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
+                                  &( rtpPacketInfoArray[ 0 ] ),
+                                  MAX_IN_FLIGHT_PKTS );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+    TEST_ASSERT_EQUAL( &( rtpPacketInfoArray[ 0 ] ), rtpPacketQueue.pRtpPacketInfoArray );
+    TEST_ASSERT_EQUAL( MAX_IN_FLIGHT_PKTS, rtpPacketQueue.rtpPacketInfoArrayLength );
+    TEST_ASSERT_EQUAL( 0, rtpPacketQueue.readIndex );
+    TEST_ASSERT_EQUAL( 0, rtpPacketQueue.writeIndex );
+    TEST_ASSERT_EQUAL( 0, rtpPacketQueue.packetCount );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Add packets in the RTP packet Queue.
+ */
+void test_RtpPacketQueue_ForceEnqueue( void )
+{
+    uint16_t i;
+    RtpPacketQueueResult_t result;
+    RtpPacketInfo_t deletedRtpPacketInfo, rtpPacketInfo;
+    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
+                                           0x12, 0x34, 0x43, 0x21,
+                                           0xAB, 0xCD, 0xDB, 0xCA };
+
+    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
+                                  &( rtpPacketInfoArray[ 0 ] ),
+                                  MAX_IN_FLIGHT_PKTS );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+
+    for( i = 0; i < 20; i++ )
+    {
+        rtpPacketInfo.seqNum = i;
+        rtpPacketInfo.pSerializedRtpPacket = &( expectedSerializedPacket[ 0 ] );
+        rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
+
+        result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
+                                              &( rtpPacketInfo ),
+                                              &( deletedRtpPacketInfo ) );
+
+        TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+    }
+
+    for( i = 0; i < 20; i++ )
+    {
+        result = RtpPacketQueue_Dequeue( &( rtpPacketQueue ),
+                                         &( rtpPacketInfo ) );
+
+        TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+        TEST_ASSERT_EQUAL( i, rtpPacketInfo.seqNum );
+        TEST_ASSERT_EQUAL( &( expectedSerializedPacket[ 0 ] ),
+                           rtpPacketInfo.pSerializedRtpPacket );
+        TEST_ASSERT_EQUAL( sizeof( expectedSerializedPacket ),
+                           rtpPacketInfo.serializedPacketLength );
+    }
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Validate Queue full functionality.
+ */
+void test_RtpPacketQueue_ForceEnqueue_Full( void )
+{
+    uint16_t i;
+    RtpPacketQueueResult_t result;
+    RtpPacketInfo_t deletedRtpPacketInfo, rtpPacketInfo;
+    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
+                                           0x12, 0x34, 0x43, 0x21,
+                                           0xAB, 0xCD, 0xDB, 0xCA };
+
+    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
+                                  &( rtpPacketInfoArray[ 0 ] ),
+                                  4 );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+
+    for( i = 0; i < 4; i++ )
+    {
+        rtpPacketInfo.seqNum = i;
+        rtpPacketInfo.pSerializedRtpPacket = expectedSerializedPacket;
+        rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
+
+        result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
+                                              &( rtpPacketInfo ),
+                                              &( deletedRtpPacketInfo ) );
+
+        TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+    }
+
+    result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
+                                          &( rtpPacketInfo ),
+                                          &( deletedRtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_PACKET_DELETED, result );
+    TEST_ASSERT_EQUAL( 0, deletedRtpPacketInfo.seqNum ); /* First packet deleted. */
+
+    result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
+                                          &( rtpPacketInfo ),
+                                          &( deletedRtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_PACKET_DELETED, result );
+    TEST_ASSERT_EQUAL( 1, deletedRtpPacketInfo.seqNum ); /* Second packet deleted. */
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Validate dequeue when queue is empty.
+ */
+void test_RtpPacketQueue_Dequeue_EmptyQueue( void )
+{
+    RtpPacketQueueResult_t result;
+    RtpPacketInfo_t rtpPacketInfo;
+
+    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
+                                  &( rtpPacketInfoArray[ 0 ] ),
+                                  MAX_IN_FLIGHT_PKTS );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+
+    result = RtpPacketQueue_Dequeue( &( rtpPacketQueue ),
+                                     &( rtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_EMPTY, result );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Validate dequeue functionality.
+ */
+void test_RtpPacketQueue_Dequeue( void )
+{
+    RtpPacketQueueResult_t result;
+    RtpPacketInfo_t deletedRtpPacketInfo, rtpPacketInfo;
+    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
+                                           0x12, 0x34, 0x43, 0x21,
+                                           0xAB, 0xCD, 0xDB, 0xCA };
+
+    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
+                                  &( rtpPacketInfoArray[ 0 ] ),
+                                  MAX_IN_FLIGHT_PKTS );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+
+    rtpPacketInfo.seqNum = 10;
+    rtpPacketInfo.pSerializedRtpPacket = &( expectedSerializedPacket[ 0 ] );
+    rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
+
+    result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
+                                          &( rtpPacketInfo ),
+                                          &( deletedRtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+
+    result = RtpPacketQueue_Dequeue( &( rtpPacketQueue ),
+                                     &( rtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( 10, rtpPacketInfo.seqNum );
+    TEST_ASSERT_EQUAL( sizeof( expectedSerializedPacket ),
+                       rtpPacketInfo.serializedPacketLength );
+    TEST_ASSERT_EQUAL( &( expectedSerializedPacket[ 0 ] ),
+                       rtpPacketInfo.pSerializedRtpPacket );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Validate peek functionality when the queue is empty.
+ */
+void test_RtpPacketQueue_Peek_EmptyQueue( void )
+{
+    RtpPacketQueueResult_t result;
+    RtpPacketInfo_t rtpPacketInfo;
+
+    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
+                                  &( rtpPacketInfoArray[ 0 ] ),
+                                  MAX_IN_FLIGHT_PKTS );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+
+    result = RtpPacketQueue_Peek( &( rtpPacketQueue ),
+                                  &( rtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_EMPTY, result );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Validate peek functionality.
+ */
+void test_RtpPacketQueue_Peek( void )
+{
+    RtpPacketQueueResult_t result;
+    RtpPacketInfo_t deletedRtpPacketInfo, rtpPacketInfo;
+    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
+                                           0x12, 0x34, 0x43, 0x21,
+                                           0xAB, 0xCD, 0xDB, 0xCA };
+
+    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
+                                  &( rtpPacketInfoArray[ 0 ] ),
+                                  MAX_IN_FLIGHT_PKTS );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+
+    result = RtpPacketQueue_Dequeue( &( rtpPacketQueue ),
+                                     &( rtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_EMPTY, result );
+
+    rtpPacketInfo.seqNum = 20;
+    rtpPacketInfo.pSerializedRtpPacket = &( expectedSerializedPacket[ 0 ] );
+    rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
+
+    result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
+                                          &( rtpPacketInfo ),
+                                          &( deletedRtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+
+    result = RtpPacketQueue_Peek( &( rtpPacketQueue ),
+                                  &( rtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( 20, rtpPacketInfo.seqNum );
+    TEST_ASSERT_EQUAL( sizeof( expectedSerializedPacket ),
+                       rtpPacketInfo.serializedPacketLength );
+    TEST_ASSERT_EQUAL( &( expectedSerializedPacket[ 0 ] ),
+                       &( rtpPacketInfo.pSerializedRtpPacket[ 0 ] ) );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Validate retrieve functionality when the queue is empty.
+ */
+void test_RtpPacketQueue_Retrieve_Empty( void )
+{
+    RtpPacketQueueResult_t result;
+    RtpPacketInfo_t retrievedRtpPacketInfo;
+
+    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
+                                  &( rtpPacketInfoArray[ 0 ] ),
+                                  MAX_IN_FLIGHT_PKTS );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+
+    result = RtpPacketQueue_Retrieve( &( rtpPacketQueue ),
+                                      0,
+                                      &( retrievedRtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_EMPTY, result );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Validate retrieve functionality when the queue is full.
+ */
+void test_RtpPacketQueue_Retrieve_Full( void )
+{
+    uint16_t i;
+    RtpPacketQueueResult_t result;
+    RtpPacketInfo_t rtpPacketInfo;
+    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
+                                           0x12, 0x34, 0x43, 0x21,
+                                           0xAB, 0xCD, 0xDB, 0xCA };
+
+    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
+                                  &( rtpPacketInfoArray[ 0 ] ),
+                                  4 );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+
+    for( i = 0; i < 4; i++ )
+    {
+        rtpPacketInfo.seqNum = i;
+        rtpPacketInfo.pSerializedRtpPacket = &( expectedSerializedPacket[ 0 ] );
+        rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
+
+        result = RtpPacketQueue_Enqueue( &( rtpPacketQueue ),
+                                         &( rtpPacketInfo ) );
+
+        TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+    }
+
+    rtpPacketInfo.seqNum = 5;
+    rtpPacketInfo.pSerializedRtpPacket = &( expectedSerializedPacket[ 0 ] );
+    rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
+
+    result = RtpPacketQueue_Enqueue( &( rtpPacketQueue ),
+                                     &( rtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_FULL, result );
+
+    result = RtpPacketQueue_Retrieve( &( rtpPacketQueue ),
+                                      4
+                                      &( rtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+    TEST_ASSERT_EQUAL( 4, rtpPacketInfo.seqNum );
+    TEST_ASSERT_EQUAL( &( expectedSerializedPacket[ 0 ] ),
+                       rtpPacketInfo.pSerializedRtpPacket );
+    TEST_ASSERT_EQUAL( sizeof( expectedSerializedPacket ),
+                       rtpPacketInfo.serializedPacketLength );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Validate retrieve functionality when RTP packet info is not found.
+ */
+void test_RtpPacketQueue_Retrieve_NotFound( void )
+{
+    uint16_t i;
+    RtpPacketQueueResult_t result;
+    RtpPacketInfo_t deletedRtpPacketInfo, rtpPacketInfo;
+    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
+                                           0x12, 0x34, 0x43, 0x21,
+                                           0xAB, 0xCD, 0xDB, 0xCA };
+
+    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
+                                  &( rtpPacketInfoArray[ 0 ] ),
+                                  MAX_IN_FLIGHT_PKTS );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+
+    for( i = 0; i < 20; i++ )
+    {
+        rtpPacketInfo.seqNum = i;
+        rtpPacketInfo.pSerializedRtpPacket = &( expectedSerializedPacket[ 0 ] );
+        rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
+
+        result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
+                                              &( rtpPacketInfo ),
+                                              &( deletedRtpPacketInfo ) );
+
+        TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+    }
+
+    result = RtpPacketQueue_Retrieve( &( rtpPacketQueue ),
+                                      100,
+                                      &( rtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_PACKET_NOT_FOUND, result );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Validate retrieve functionality when RTP packet info is found.
+ */
+void test_RtpPacketQueue_Retrieve( void )
+{
+    uint16_t i;
+    RtpPacketQueueResult_t result;
+    RtpPacketInfo_t deletedRtpPacketInfo, rtpPacketInfo;
+    uint8_t expectedSerializedPacket[] = { 0x80, 0x66, 0xAB, 0x12,
+                                           0x12, 0x34, 0x43, 0x21,
+                                           0xAB, 0xCD, 0xDB, 0xCA };
+
+    result = RtpPacketQueue_Init( &( rtpPacketQueue ),
+                                  &( rtpPacketInfoArray[ 0 ] ),
+                                  MAX_IN_FLIGHT_PKTS );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+
+    for( i = 0; i < 20; i++ )
+    {
+        rtpPacketInfo.seqNum = i;
+        rtpPacketInfo.pSerializedRtpPacket = &( expectedSerializedPacket[ 0 ] );
+        rtpPacketInfo.serializedPacketLength = sizeof( expectedSerializedPacket );
+
+        result = RtpPacketQueue_ForceEnqueue( &( rtpPacketQueue ),
+                                              &( rtpPacketInfo ),
+                                              &( deletedRtpPacketInfo ) );
+
+        TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+    }
+
+    result = RtpPacketQueue_Retrieve( &( rtpPacketQueue ),
+                                      8,
+                                      &( rtpPacketInfo ) );
+
+    TEST_ASSERT_EQUAL( RTP_PACKET_QUEUE_RESULT_OK, result );
+    TEST_ASSERT_EQUAL( 8, rtpPacketInfo.seqNum );
+    TEST_ASSERT_EQUAL( &( expectedSerializedPacket[ 0 ] ),
+                       rtpPacketInfo.pSerializedRtpPacket );
+    TEST_ASSERT_EQUAL( sizeof( expectedSerializedPacket ),
+                       rtpPacketInfo.serializedPacketLength );
+}
+
+/*-----------------------------------------------------------*/
diff --git a/test/unit-test/rtpPktStore/ut.cmake b/test/unit-test/rtp_packet_queue/ut.cmake
similarity index 98%
rename from test/unit-test/rtpPktStore/ut.cmake
rename to test/unit-test/rtp_packet_queue/ut.cmake
index e35240c..e1be8bf 100644
--- a/test/unit-test/rtpPktStore/ut.cmake
+++ b/test/unit-test/rtp_packet_queue/ut.cmake
@@ -3,7 +3,7 @@
 include( ${MODULE_ROOT_DIR}/rtpFilePaths.cmake )

 # ====================  Define your project name (edit) ========================
-set( project_name "rtpPktStore" )
+set( project_name "rtp_packet_queue" )

 message( STATUS "${project_name}" )

--
2.33.1.windows.1

